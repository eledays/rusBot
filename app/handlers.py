from app import bot, db, basedir, ai
from app.bot_utils import send_long_message, send_pieces

import telebot

import os
import shutil


@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(message.chat.id)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç\n\n'
                                      '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É\n\n<i>–∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</i>\n\n'
                                      '<b>/create</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É\n'
                                      '<b>/topics</b> ‚Äî —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–º\n'
                                      '<b>/help</b> ‚Äî –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')
    

@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n'
                                      '<b>/study</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è, –≤—ã–±–æ—Ä —Ç–µ–º\n\n'
                                      '<b>–¢–µ–º—ã:</b>\n'
                                      '<b>/create</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É\n'
                                      '<b>/topics</b> ‚Äî —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–º'
                                      '<b>/edit</b> ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É\n'
                                      '<b>/pieces n</b> ‚Äî –ø–æ—Ä—Ü–∏–∏ —Ç–µ–æ—Ä–∏–∏ —Ç–µ–º—ã n\n')
    

@bot.message_handler(commands=['create'])
def create_topic(message, step=0, data={}):
    if message.text == '/cancel':
        if data and 'topic_id' in data:
            db.delete_topic(data['topic_id'])
            shutil.rmtree(f'{basedir}/users_content/{data["topic_id"]}')
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
        return

    if step == 0:
        message = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–§–∏–∑–∏–∫–∞. –î–∏–Ω–∞–º–∏–∫–∞. 9 –∫–ª–∞—Å—Å"')
        bot.register_next_step_handler(message, create_topic, 1)

    elif step == 1:
        name = message.text
        topic_id = db.add_topic(name, message.from_user.id)
    
        os.mkdir(f'{basedir}/users_content/{topic_id}')

        message = bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é —Ç–µ–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –≤—ã—É—á–∏—Ç—å. –î–ª—è —ç—Ç–æ–≥–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –µ—ë —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ‚Äî <b>/ai</b>')
        bot.register_next_step_handler(message, create_topic, 2, {'topic_id': topic_id, 'name': name})

    elif step == 2:
        if message.text == '/ai':
            if os.path.exists(f'{basedir}/users_content/{data["topic_id"]}/theory.txt'):
                bot.send_message(message.chat.id, '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ò–ò –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã')
                bot.register_next_step_handler(message, create_topic, 2, data)
                return
            print(data)
            create_topic(message, 'ai-gen-text', data)
        elif message.text == '/next':
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ. –°–µ–π—á–∞—Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–∑–æ–±—å–µ—Ç —Ç–µ–æ—Ä–∏—é –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
            with open(f'{basedir}/users_content/{data["topic_id"]}/theory.txt', 'r') as file:
                text = file.read()
            pieces = ai.text_to_pieces(text)

            text = '\n\n'.join(f'<blockquote>{e}</blockquote>' for e in pieces)

            message = send_long_message(bot, message.chat.id, text + '\n\n<b>/save</b> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ü–∏–∏\n'
                                                                     '<b>/edit</b> ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')

            data['pieces'] = pieces
            db.add_pieces(data['topic_id'], data['pieces'])

            bot.register_next_step_handler(message, create_topic, 3, data)
        else:
            text = message.text
            with open(f'{basedir}/users_content/{data["topic_id"]}/theory.txt', 'a') as file:
                file.write(text + '\n\n')
            message = bot.send_message(message.chat.id, '–ó–∞–ø–∏—Å–∞–ª. –ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî <b>/next</b>')
            bot.register_next_step_handler(message, create_topic, 2, data)

    elif step == 3:
        if message.text == '/save':
            bot.send_message(message.chat.id, '–°–æ—Ö—Ä–∞–Ω–∏–ª')
        elif message.text == '/edit':
            bot.send_message(message.chat.id, '<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n'
                                                '<b>/edit_piece n</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ü–∏—é –Ω–æ–º–µ—Ä n\n'
                                                '<b>/delete_piece n</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Ä—Ü–∏—é –Ω–æ–º–µ—Ä n\n'
                                                '<b>/add_piece</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ü–∏—é\n'
                                                '<b>/show_pieces</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä—Ü–∏–∏\n\n'
                                                '<b>/finish</b> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
            bot.register_next_step_handler(message, edit_topic, 'piece_editing_cmd', data)

    elif step == 'ai-gen-text':
        name = data['name']
        topic_id = data['topic_id']
        prompt = f'–ù–∞–ø–∏—à–∏ –≤—Å—é —Ç–µ–æ—Ä–∏—é –ø–æ —Ç–µ–º–µ "{name}". –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown'
        message = bot.send_message(message.chat.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
        answer = ai.ask(prompt)
        bot.delete_message(message.chat.id, message.id)

        keyboard = telebot.types.InlineKeyboardMarkup(row_width=3)
        keyboard.add(
            telebot.types.InlineKeyboardButton(text='‚úîÔ∏è', callback_data=f'yes_{topic_id}'), 
            telebot.types.InlineKeyboardButton(text='‚úñÔ∏è', callback_data=f'no_{topic_id}'),
            telebot.types.InlineKeyboardButton(text='üîÑ', callback_data=f'refresh_{topic_id}')
        )
        send_long_message(bot, message.chat.id, answer, reply_markup=keyboard, parse_mode='markdown')


@bot.message_handler(commands=['edit'])
def edit_topic(message, step=0, data={}):
    if message.text == '/cancel':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
        return
        
    if step == 0:
        message = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å id —Ç–µ–º—ã')
        bot.register_next_step_handler(message, edit_topic, 1)
    
    elif step == 1:
        topic_id = message.text
        if not topic_id.isdigit():
            bot.send_message(message.chat.id, 'Id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
            return
        topic_id = int(topic_id)
        topic = db.get_topic(topic_id)
        if not topic:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return
        
        if topic['author_id'] != message.from_user.id:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É')
            return
        
        pieces = db.get_pieces(topic_id)
        data['topic_id'] = topic_id
        data['pieces'] = [e['data'] for e in pieces]
        bot.send_message(message.chat.id, '<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n'
                                            '<b>/edit_piece n</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ü–∏—é –Ω–æ–º–µ—Ä n\n'
                                            '<b>/delete_piece n</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Ä—Ü–∏—é –Ω–æ–º–µ—Ä n\n'
                                            '<b>/add_piece</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ü–∏—é\n'
                                            '<b>/show_pieces</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä—Ü–∏–∏\n\n'
                                            '<b>/finish</b> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
        
        bot.register_next_step_handler(message, edit_topic, 'piece_editing_cmd', data)

    elif step == 'piece_editing_cmd':
        if message.text.startswith('/edit_piece'):
            n = message.text.split()[-1]
            if not n.isdigit():
                bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
                return
            
            n = int(n)
            
            if n < 1 or n > len(data['pieces']):
                bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞')
                return
            
            message = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é')
            bot.register_next_step_handler(message, edit_topic, 'piece_editing_edit', {'n': n, **data})
        
        elif message.text.startswith('/delete_piece'):
            n = message.text.split()[-1]
            if not n.isdigit():
                bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
                return
            
            n = int(n)
            
            if n < 1 or n > len(data['pieces']):
                bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞')
                return
            
            del data['pieces'][n - 1]
            message = bot.send_message(message.chat.id, f'–ü–æ—Ä—Ü–∏—è {n} —É–¥–∞–ª–µ–Ω–∞')
            bot.register_next_step_handler(message, edit_topic, 'piece_editing_cmd', data)
        
        elif message.text.startswith('/add_piece'):
            message = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é')
            bot.register_next_step_handler(message, edit_topic, 'piece_editing_add', data)
        
        elif message.text.startswith('/show_pieces'):
            pieces = data['pieces']
            text = '\n\n'.join(f'<b>{i+1}.</b> <blockquote>{piece}</blockquote>' for i, piece in enumerate(pieces))
            message = send_long_message(bot, message.chat.id, text)
            bot.register_next_step_handler(message, edit_topic, 'piece_editing_cmd', data)
        
        elif message.text.startswith('/finish'):
            db.add_pieces(data['topic_id'], data['pieces'])
            bot.send_message(message.chat.id, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            return

    elif step == 'piece_editing_edit':
        n = data['n']
        new_piece = message.text
        data['pieces'][n - 1] = new_piece
        bot.send_message(message.chat.id, f'–ü–æ—Ä—Ü–∏—è {n} –∏–∑–º–µ–Ω–µ–Ω–∞')
        bot.register_next_step_handler(message, edit_topic, 'piece_editing_cmd', data)

    elif step == 'piece_editing_add':
        new_piece = message.text
        data['pieces'].append(new_piece)
        bot.send_message(message.chat.id, '–ù–æ–≤–∞—è –ø–æ—Ä—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        bot.register_next_step_handler(message, edit_topic, 'piece_editing_cmd', data)


@bot.message_handler(commands=['topics'])
def send_topics(message):
    topics = db.get_topics()[:50]
    topics = [f'{e["id"] + 1}. {e["name"]}' for e in topics]
    bot.send_message(message.chat.id, '<b>–¢–µ–º—ã</b>\n' + '\n'.join(topics))


@bot.message_handler(commands=['pieces'])
def pieces_cmd(message):
    topic_id = message.text.split()[1]
    if not topic_id.isdigit():
        bot.send_message(message.chat.id, 'Id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        return
    
    pieces = db.get_pieces(int(topic_id))
    if not pieces:
        bot.send_message(message.chat.id, '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return 
    
    send_pieces(bot, message.chat.id, pieces)


@bot.message_handler(commands=['study'])
def study(message):
    bot.send_message(message.chat.id, '')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data.startswith('yes'):
        topic_id = call.data.split('_')[1]
        name = db.get_topic_name_by_id(topic_id)
        text = call.message.text
        with open(f'{basedir}/users_content/{topic_id}/theory.txt', 'a') as file:
            file.write(text + '\n')
        message = bot.send_message(call.message.chat.id, '–ó–∞–ø–∏—Å–∞–ª. –ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî <b>/next</b>')
        bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(message, create_topic, 2, {'topic_id': topic_id, 'name': name})
    elif call.data.startswith('no'):
        topic_id = call.data.split('_')[1]
        name = db.get_topic_name_by_id(topic_id)
        message = bot.send_message(call.message.chat.id, '–ù–µ –∑–∞–ø–∏—Å—ã–≤–∞—é. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç')
        bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.register_next_step_handler(message, create_topic, 2, {'topic_id': topic_id, 'name': name})
    elif call.data.startswith('refresh'):
        bot.delete_message(call.message.chat.id, call.message.id)
        topic_id = call.data.split('_')[1]
        name = db.get_topic_name_by_id(topic_id)
        create_topic(call.message, 'ai-gen-text', {'topic_id': topic_id, 'name': name})